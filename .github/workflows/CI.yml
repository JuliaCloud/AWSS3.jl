name: CI
# Run on master, any tag or any pull request
on:
  push:
    branches:
      - master
      - staging
      - trying
    tags: '*'
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC (8 PM CST)
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.version == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - "1"    # Latest release
        os:
          - ubuntu-latest
          - macOS-latest
        arch:
          - x64
        include:
          # Add a 1.0 job just to make sure we still support it
          - os: ubuntu-latest
            version: "1.0"
            arch: x64
          # Add a 1.3 job because that's what Invenia actually uses
          - os: ubuntu-latest
            version: "1.3"
            arch: x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@latest
      - name: "Compat fix for Julia < v1.5"
        if: ${{ (matrix.version == "1.3") || (matrix.version == "1.0") }}
        run: |
          # Remove Minio from the test project
          write("Project.toml", read(`grep -v '^Minio =' Project.toml`, String))
          run(`sed -i -e 's/, "Minio"//' Project.toml`)
        shell: julia --project=. --startup=no --color=yes {0}
      - env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        uses: julia-actions/julia-runtest@latest
  slack:
    name: Notify Slack Failure
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule'
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: env.WORKFLOW_CONCLUSION == 'failure'
        with:
          channel: nightly-dev
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
