name: CI
on:
  merge_group:
  pull_request:
  push:
    branches:
      - master
    tags: '*'
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC (8 PM CST)
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    if: ${{ github.event_name != 'pull_request' }}  # Avoid running on PRs as OIDC will fail when running on a fork
    permissions:
      # Required for interacting with GitHub's OIDC Token endpoint:
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services#adding-permissions-settings
      id-token: write
      contents: read  # Required for `actions/checkout
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.version == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - "1.6"  # Earliest supported version / Invenia version used
          - "1"    # Latest release
        os:
          - ubuntu-latest
          - macOS-latest
        arch:
          - x64
        exclude:
          # Only testing a single version of macOS to make CI faster.
          # Note: Ideally this would be the latest version of Julia but lately
          # Julia 1.7.1 is generating segmentation faults only on CI.
          - version: "1"
            os: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Debug OIDC Claims
        uses: github/actions-oidc-debugger@main
        with:
          audience: sts.amazonaws.com
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/AWSS3.jl
          aws-region: us-east-1
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@latest
      - uses: julia-actions/julia-runtest@latest

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - uses: julia-actions/julia-buildpkg@latest
      - uses: julia-actions/julia-docdeploy@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}

  # Merge queues only wait for the required status checks to pass which are defined in the
  # repository settings under the branch protection rules. Unfortunately, the required
  # status checks for PRs and merge queues must be identical even though the workflows
  # themselves are triggered separately (i.e `pull_request` vs. `merge_group`).
  #
  # In order to have a status check which allows CI jobs to be skipped in PRs but must pass
  # in the merge queue we'll make use of this separate workflow job. Additionally, this
  # works around issues with using matrix jobs as required status checks. Finally, as
  # required status checks are identified by the job name only some care should be taken to
  # ensure the job name is unique across all workflows.
  #
  # For more information see:
  # - https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue#configuring-continuous-integration-ci-workflows-for-merge-queues
  # - https://github.com/orgs/community/discussions/103114#discussioncomment-8359045
  status-check:
    name: Status Check (CI)
    if: ${{ always() && (github.event_name == 'pull_request' || github.event_name == 'merge_group') }}
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - if: ${{ github.event_name == 'merge_group' && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')  || contains(needs.*.result, 'skipped')) }}
        run: exit 1
